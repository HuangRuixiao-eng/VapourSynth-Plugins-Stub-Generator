import ctypes
from typing import Any, Iterator
from enum import Enum

class ColorFamily(Enum):
    RGB = 2000000
    YUV = 3000000
    GRAY = 1000000
    YCOCG = 4000000
    COMPAT = 9000000

class SampleType(Enum):
    GRAY8: int
    GRAY16: int
    GRAYH: int
    GRAYS: int
    YUV420P8: int
    YUV422P8: int
    YUV444P8: int
    YUV410P8: int
    YUV411P8: int
    YUV440P8: int
    YUV420P9: int
    YUV422P9: int
    YUV444P9: int
    YUV420P10: int
    YUV422P10: int
    YUV444P10: int
    YUV420P12: int
    YUV422P12: int
    YUV444P12: int
    YUV420P14: int
    YUV422P14: int
    YUV444P14: int
    YUV420P16: int
    YUV422P16: int
    YUV444P16: int
    YUV444PH: int
    YUV444PS: int
    RGB24: int
    RGB27: int
    RGB30: int
    RGB48: int
    RGBH: int
    RGBS: int
    COMPATBGR32: int
    COMPATYUY2: int

class _Core:
    from . import Format

    num_threads: int
    add_cache: bool
    max_cache_size: int
    def set_max_cache_size(self, mb: int) -> None: ...
    def get_plugins(self) -> dict: ...
    def list_functions(self) -> str: ...
    def register_format(
        self,
        color_family,
        sample_type,
        bits_per_sample: int,
        subsampling_w: int,
        subsampling_h: int,
    ) -> Format: ...
    def get_format(self, id: int) -> Format: ...
    def version(self) -> str: ...
    def version_number(self) -> int: ...

class Format:
    from . import Core
    from . import Format

    id: int
    name: str
    color_family: ColorFamily
    sample_type: SampleType
    bits_per_sample: int
    bytes_per_sample: int
    subsampling_w: int
    subsampling_h: int
    num_planes: int
    def replace(self, core: Core = None, **kwargs) -> Format: ...

class VideoFrame:
    from . import VideoFrame

    format: Format
    width: int
    height: int
    readonly: bool
    props: dict
    def copy(self) -> VideoFrame: ...
    def get_read_ptr(self, plane: int) -> ctypes.c_void_p: ...
    def get_read_array(self, plane: int) -> memoryview: ...
    def get_write_ptr(self, plane: int) -> ctypes.c_void_p: ...
    def get_write_array(self, plane: int) -> memoryview: ...
    def get_stride(self, plane: int) -> int: ...

class _VideoNode:
    from . import _VideoNode

    format: Format
    width: int
    height: int
    num_frames: int
    fps: float
    fps_num: int
    fps_den: int
    flags: int
    def get_frame(self, n: int) -> VideoFrame: ...
    def get_frame_async(self, n: int) -> VideoFrame: ...
    def set_output(self, index: int = 0, alpha: _VideoNode = None) -> None: ...
    def output(
        self,
        fileobj,
        y4m: bool = False,
        prefetch: int = 0,
        progress_update: callable = None,
    ) -> None: ...
    def frames(self) -> Iterator: ...

RGB = ColorFamily.RGB
YUV = ColorFamily.YUV
GRAY = ColorFamily.GRAY
YCOCG = ColorFamily.YCOCG
COMPAT = ColorFamily.COMPAT

GRAY8 = SampleType.GRAY8
GRAY16 = SampleType.GRAY16
GRAYH = SampleType.GRAYH
GRAYS = SampleType.GRAYS
YUV420P8 = SampleType.YUV420P8
YUV422P8 = SampleType.YUV422P8
YUV444P8 = SampleType.YUV444P8
YUV410P8 = SampleType.YUV410P8
YUV411P8 = SampleType.YUV411P8
YUV440P8 = SampleType.YUV440P8
YUV420P9 = SampleType.YUV420P9
YUV422P9 = SampleType.YUV422P9
YUV444P9 = SampleType.YUV444P9
YUV420P10 = SampleType.YUV420P10
YUV422P10 = SampleType.YUV422P10
YUV444P10 = SampleType.YUV444P10
YUV420P12 = SampleType.YUV420P12
YUV422P12 = SampleType.YUV422P12
YUV444P12 = SampleType.YUV444P12
YUV420P14 = SampleType.YUV420P14
YUV422P14 = SampleType.YUV422P14
YUV444P14 = SampleType.YUV444P14
YUV420P16 = SampleType.YUV420P16
YUV422P16 = SampleType.YUV422P16
YUV444P16 = SampleType.YUV444P16
YUV444PH = SampleType.YUV444PH
YUV444PS = SampleType.YUV444PS
RGB24 = SampleType.RGB24
RGB27 = SampleType.RGB27
RGB30 = SampleType.RGB30
RGB48 = SampleType.RGB48
RGBH = SampleType.RGBH
RGBS = SampleType.RGBS
COMPATBGR32 = SampleType.COMPATBGR32
COMPATYUY2 = SampleType.COMPATYUY2

from . import Core

core: Core

def get_core(threads: int = 0, add_cache: bool = True) -> Core: ...
def set_message_handler(handler_func: callable) -> Any: ...
def get_outputs() -> Any: ...
def get_output(index: int = 0) -> Any: ...
def clear_output(index: int = 0) -> Any: ...
def clear_outputs() -> Any: ...
def construct_signature(signature: object, injected: object = None) -> Any: ...
